import os

#teuchos_env = Environment()
Import('bas_env')

teuchos_env = bas_env.Clone()


def configureAndMake(target, source, env):
  # Whatever it takes to CONFIGURE and MAKE the TPL (teuchos, then fftw)
  source_name = str(source[0])

  (dir_name, file_name) = os.path.split(source_name)
  print dir_name       # packages/teuchos

  target_name = str(target[0])
  if not os.path.exists(target_name):
    print target_name, "does not exist! CONFIGURING, then MAKING..."

  ccflags = teuchos_env.Dictionary()['CCFLAGS']

  #extra_config_setting = "%s=%s" % (extra_flags_key, ccflags)
  # WJB: SCons and FFTW use CCFLAGS to specify debug vs. opt variant
  #      But for teuchos, it must be specified via CXXFLAGS, thus the
  #      flag_key/value substitution "trickery" in the next few lines

  new_flag_key = 'CXXFLAGS'
  extra_config_setting = "%s=%s" % (new_flag_key, ccflags)
  print "xtraConfigSetting = ", extra_config_setting

  cmd = 'cd ' + dir_name + ' && configure ' + extra_config_setting
  cmd = cmd + ' --cache-file=config.cache --with-gnumake'
  cmd = cmd + ' --enable-teuchos'
  cmd = cmd + ' --disable-default-packages'
  cmd = cmd + ' --disable-libcheck >  confAndMkTeuchos.log'
  cmd = cmd + ' ; gmake -j2        >> confAndMkTeuchos.log'

  #cmd = cmd + ' --disable-libcheck'

  print "bldCmd = ", cmd
  os.system(cmd)

  return target_name


def buildTPL(target, source, env):
  # Whatever it takes to build

  target_name = configureAndMake(target, source, env)

  # WJB: fake SCons into thinking dependencies have been built?
  ## WJB: pretty good-- os.system("touch " + dir_name + "/libteuchos.a")

  os.system("touch " + target_name)

  #Command("file.out", "file.in",
          #[
            #Copy("$TARGET", "$SOURCE"),
            #Touch("$TARGET")
          #])
  #Touch(target_name)

  #os.system("nm " + target_name + " > libteuchos_nm.txt")

  return 

teuchos_env.Command('#packages/teuchos/teuchos.o',
                    '#packages/teuchos/fileList.log', buildTPL)


#dict = teuchos_env.Dictionary()
#keys = dict.keys()
#keys.sort()
#for key in keys:
#  print "construction variable = '%s', value = '%s'" % (key, dict[key])

